{"ast":null,"code":"var _jsxFileName = \"/media/ann/Backup/JS/DSR JS Bootcamp 2020/01_lesson_tic-tac-toe/my-tic-tac-toe/src/components/Game.js\";\nimport React, { Component } from 'react';\nimport { calculateWinner } from '../helpers';\nimport Board from './Board';\nimport HintButton from './HintButton';\n/* \nКлассовый компонент или реакт-компонент Game, который наследует \nсвойства и методы от React.Component\n*/\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n  /* создаем функцию-обработчик события нажатия на элемент*/\n\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1); // константа history это все состояния поля после каждого хода, массив объектов\n\n    const current = history[history.length - 1]; // current - это последний элемент игры - состояние массива squares после последнего хода, последний объект, который был добавлен в массив history\n\n    const squares = current.squares.slice(); // с помощью slice() копируем массив squares, чтобы соблюсти иммутабельность\n\n    console.log('squares', squares);\n\n    if (calculateWinner(squares) || squares[i]) {\n      // проверяем есть ли победитель или все клетки заполнены.\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        // метод concat() не изменяет оргинальный массив. создает новый и добавляет указанные элементы\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  handleHintClick() {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1); // константа history это все состояния поля после каждого хода, массив объектов\n\n    const current = history[history.length - 1]; // current - это последний элемент игры - состояние массива squares после последнего хода, последний объект, который был добавлен в массив history\n\n    const squares = current.squares.slice(); // с помощью slice() копируем массив squares, чтобы соблюсти иммутабельность\n\n    console.log('squaresHint', squares);\n\n    for (let i = 0; i < squares.length; i++) {\n      console.log('squaresHint[i]', squares[i]);\n\n      if (calculateWinner(squares) || squares[i]) {\n        // проверяем есть ли победитель или все клетки заполнены.\n        return;\n      }\n\n      if (squares[i] === null) squares[i] = this.state.xIsNext ? 'X' : 'O';\n      this.setState({\n        history: history.concat([{\n          // метод concat() не изменяет оргинальный массив. создает новый и добавляет указанные элементы\n          squares: squares\n        }]),\n        stepNumber: history.length,\n        xIsNext: !this.state.xIsNext\n      });\n    }\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    /* добавляем кнопки перехода к конкретному ходу\n    для каждого хода создается элемент списка li, который содержит кнопку button */\n\n    const moves = history.map((step, move) => {\n      const desc = move ? `Go to move # ${move}` : `Start`;\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = `Player ${winner} is WINNER!! \n                            Congratulations!`;\n    } else {\n      status = `Player ${this.state.xIsNext ? 'X' : 'O'} !   Your turn!`;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, status), React.createElement(HintButton, {\n      onClick: () => this.handleHintClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, moves)));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/media/ann/Backup/JS/DSR JS Bootcamp 2020/01_lesson_tic-tac-toe/my-tic-tac-toe/src/components/Game.js"],"names":["React","Component","calculateWinner","Board","HintButton","Game","constructor","props","state","history","squares","Array","fill","stepNumber","xIsNext","handleClick","i","slice","current","length","console","log","setState","concat","handleHintClick","jumpTo","step","render","winner","moves","map","move","desc","status"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAGA;;;;;AAOA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AACzBK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,CAAC;AACNC,QAAAA,OAAO,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd;AADH,OAAD,CADA;AAITC,MAAAA,UAAU,EAAE,CAJH;AAKTC,MAAAA,OAAO,EAAE;AALA,KAAb;AAOH;AAED;;;AAEAC,EAAAA,WAAW,CAACC,CAAD,EAAI;AACX,UAAMP,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAAX,CAAmBQ,KAAnB,CAAyB,CAAzB,EAA4B,KAAKT,KAAL,CAAWK,UAAX,GAAwB,CAApD,CAAhB,CADW,CAC6D;;AACxE,UAAMK,OAAO,GAAGT,OAAO,CAACA,OAAO,CAACU,MAAR,GAAiB,CAAlB,CAAvB,CAFW,CAEkC;;AAC7C,UAAMT,OAAO,GAAGQ,OAAO,CAACR,OAAR,CAAgBO,KAAhB,EAAhB,CAHW,CAG8B;;AACzCG,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBX,OAAvB;;AACA,QAAIR,eAAe,CAACQ,OAAD,CAAf,IAA4BA,OAAO,CAACM,CAAD,CAAvC,EAA4C;AAAE;AAC1C;AACH;;AACDN,IAAAA,OAAO,CAACM,CAAD,CAAP,GAAa,KAAKR,KAAL,CAAWM,OAAX,GAAqB,GAArB,GAA2B,GAAxC;AACA,SAAKQ,QAAL,CAAc;AACVb,MAAAA,OAAO,EAAEA,OAAO,CAACc,MAAR,CAAe,CAAC;AAAI;AAC3Bb,QAAAA,OAAO,EAAEA;AADc,OAAD,CAAf,CADC;AAIVG,MAAAA,UAAU,EAAEJ,OAAO,CAACU,MAJV;AAKVL,MAAAA,OAAO,EAAE,CAAC,KAAKN,KAAL,CAAWM;AALX,KAAd;AAOC;;AAELU,EAAAA,eAAe,GAAG;AAChB,UAAMf,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAAX,CAAmBQ,KAAnB,CAAyB,CAAzB,EAA4B,KAAKT,KAAL,CAAWK,UAAX,GAAwB,CAApD,CAAhB,CADgB,CACwD;;AACxE,UAAMK,OAAO,GAAGT,OAAO,CAACA,OAAO,CAACU,MAAR,GAAiB,CAAlB,CAAvB,CAFgB,CAE6B;;AAC7C,UAAMT,OAAO,GAAGQ,OAAO,CAACR,OAAR,CAAgBO,KAAhB,EAAhB,CAHgB,CAGyB;;AACzCG,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BX,OAA3B;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAAO,CAACS,MAA5B,EAAoCH,CAAC,EAArC,EAAyC;AACvCI,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BX,OAAO,CAACM,CAAD,CAArC;;AAEA,UAAId,eAAe,CAACQ,OAAD,CAAf,IAA4BA,OAAO,CAACM,CAAD,CAAvC,EAA4C;AAAE;AAC1C;AACH;;AACD,UAAIN,OAAO,CAACM,CAAD,CAAP,KAAe,IAAnB,EACAN,OAAO,CAACM,CAAD,CAAP,GAAa,KAAKR,KAAL,CAAWM,OAAX,GAAqB,GAArB,GAA2B,GAAxC;AACA,WAAKQ,QAAL,CAAc;AACVb,QAAAA,OAAO,EAAEA,OAAO,CAACc,MAAR,CAAe,CAAC;AAAI;AAC3Bb,UAAAA,OAAO,EAAEA;AADc,SAAD,CAAf,CADC;AAIVG,QAAAA,UAAU,EAAEJ,OAAO,CAACU,MAJV;AAKVL,QAAAA,OAAO,EAAE,CAAC,KAAKN,KAAL,CAAWM;AALX,OAAd;AAOC;AACA;;AAMDW,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,SAAKJ,QAAL,CAAc;AACZT,MAAAA,UAAU,EAAEa,IADA;AAEZZ,MAAAA,OAAO,EAAGY,IAAI,GAAG,CAAR,KAAe;AAFZ,KAAd;AAID;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAMlB,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAA3B;AACA,UAAMS,OAAO,GAAGT,OAAO,CAAC,KAAKD,KAAL,CAAWK,UAAZ,CAAvB;AACA,UAAMe,MAAM,GAAG1B,eAAe,CAACgB,OAAO,CAACR,OAAT,CAA9B;AAGA;;;AAGA,UAAMmB,KAAK,GAAGpB,OAAO,CAACqB,GAAR,CAAY,CAACJ,IAAD,EAAOK,IAAP,KAAgB;AACxC,YAAMC,IAAI,GAAGD,IAAI,GACd,gBAAeA,IAAK,EADN,GAEd,OAFH;AAGA,aACE;AAAI,QAAA,GAAG,EAAEA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKN,MAAL,CAAYM,IAAZ,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2CC,IAA3C,CADF,CADF;AAKD,KATa,CAAd;AAWA,QAAIC,MAAJ;;AACA,QAAIL,MAAJ,EAAY;AACVK,MAAAA,MAAM,GAAI,UAASL,MAAO;6CAA1B;AAED,KAHD,MAGO;AACLK,MAAAA,MAAM,GAAI,UAAS,KAAKzB,KAAL,CAAWM,OAAX,GAAqB,GAArB,GAA2B,GAAI,iBAAlD;AACD;;AAED,WACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,EAGE,oBAAC,KAAD;AACE,MAAA,OAAO,EAAEI,OAAO,CAACR,OADnB;AAEE,MAAA,OAAO,EAAGM,CAAD,IAAO,KAAKD,WAAL,CAAiBC,CAAjB,CAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF,EASE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOiB,MAAP,CADF,EAEE,oBAAC,UAAD;AACE,MAAA,OAAO,EAAE,MAAM,KAAKT,eAAL,EADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMK,KAAN,CALF,CATF,CADF;AAmBD;;AAjHoB;;AAyH7B,eAAexB,IAAf","sourcesContent":["import React, { Component } from 'react'\nimport { calculateWinner } from '../helpers';\nimport Board from './Board'\nimport HintButton from './HintButton'\n\n\n/* \nКлассовый компонент или реакт-компонент Game, который наследует \nсвойства и методы от React.Component\n*/\n\n\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n\n    /* создаем функцию-обработчик события нажатия на элемент*/\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1); // константа history это все состояния поля после каждого хода, массив объектов\n        const current = history[history.length - 1]; // current - это последний элемент игры - состояние массива squares после последнего хода, последний объект, который был добавлен в массив history\n        const squares = current.squares.slice(); // с помощью slice() копируем массив squares, чтобы соблюсти иммутабельность\n        console.log('squares', squares)\n        if (calculateWinner(squares) || squares[i]) { // проверяем есть ли победитель или все клетки заполнены.\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{   // метод concat() не изменяет оргинальный массив. создает новый и добавляет указанные элементы\n              squares: squares,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n          }); \n        }\n\n    handleHintClick() {\n      const history = this.state.history.slice(0, this.state.stepNumber + 1); // константа history это все состояния поля после каждого хода, массив объектов\n      const current = history[history.length - 1]; // current - это последний элемент игры - состояние массива squares после последнего хода, последний объект, который был добавлен в массив history\n      const squares = current.squares.slice(); // с помощью slice() копируем массив squares, чтобы соблюсти иммутабельность\n      console.log('squaresHint', squares)\n      for (let i = 0; i < squares.length; i++) {\n        console.log('squaresHint[i]', squares[i])\n      \n        if (calculateWinner(squares) || squares[i]) { // проверяем есть ли победитель или все клетки заполнены.\n            return;\n        }\n        if (squares[i] === null)\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{   // метод concat() не изменяет оргинальный массив. создает новый и добавляет указанные элементы\n              squares: squares,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n          }) \n        }\n        }\n\n    \n\n\n\n        jumpTo(step) {\n          this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n          })\n        }\n    \n        render() {\n          const history = this.state.history;\n          const current = history[this.state.stepNumber];\n          const winner = calculateWinner(current.squares);\n\n\n          /* добавляем кнопки перехода к конкретному ходу\n          для каждого хода создается элемент списка li, который содержит кнопку button */\n\n          const moves = history.map((step, move) => {\n            const desc = move ?\n              `Go to move # ${move}` :\n              `Start`;\n            return (\n              <li key={move}>\n                <button onClick={() => this.jumpTo(move)}>{desc}</button>\n              </li>\n            );\n          });\n          \n          let status;\n          if (winner) {\n            status = `Player ${winner} is WINNER!! \n                            Congratulations!`;\n          } else {\n            status = `Player ${this.state.xIsNext ? 'X' : 'O'} !   Your turn!`;\n          }\n    \n          return (\n            <div className=\"game\">\n              <div className=\"game-board\">\n              \n              <br/>\n                <Board \n                  squares={current.squares}\n                  onClick={(i) => this.handleClick(i)}\n                />\n              </div>\n              <div className=\"game-info\">\n                <div>{ status }</div>\n                <HintButton\n                  onClick={() => this.handleHintClick() }\n                />\n                <ol>{ moves }</ol>\n              </div>\n            </div>\n          );\n        }\n      }\n\n\n\n\n\n\nexport default Game"]},"metadata":{},"sourceType":"module"}