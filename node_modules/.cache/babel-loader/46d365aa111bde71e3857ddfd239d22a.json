{"ast":null,"code":"var _jsxFileName = \"/media/ann/Backup/JS/DSR JS Bootcamp 2020/01_lesson_tic-tac-toe/my-tic-tac-toe/src/components/Game.js\";\nimport React, { Component } from 'react';\nimport { calculateWinner } from '../helpers';\nimport Board from './Board';\n/* \nКлассовый компонент или реакт-компонент Game, который наследует \nсвойства и методы от React.Component\n*/\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true\n    };\n  }\n  /* создаем функцию-обработчик события нажатия на элемент*/\n\n\n  handleClick(i) {\n    const history = this.state.history; // константа history это все состояния поля после каждого хода, массив объектов\n\n    const current = history[history.length - 1]; // current - это последний элемент игры - состояние массива squares после последнего хода, последний объект, который был добавлен в массив history\n\n    const squares = current.squares.slice(); // с помощью slice() копируем массив squares, чтобы соблюсти иммутабельность\n\n    if (calculateWinner(squares) || squares[i]) {\n      // проверяем есть ли победитель или все клетки заполнены.\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        // метод concat() не изменяет оргинальный массив. создает новый и добавляет указанные элементы\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? `Go to move # ${move}` : `Go to start`;\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = `Player ${winner} is WINNER!! \n                            Congratulations!`;\n    } else {\n      status = `Player ${this.state.xIsNext ? 'X' : 'O'} !   Your turn!`;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, status), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/media/ann/Backup/JS/DSR JS Bootcamp 2020/01_lesson_tic-tac-toe/my-tic-tac-toe/src/components/Game.js"],"names":["React","Component","calculateWinner","Board","Game","constructor","props","state","history","squares","Array","fill","xIsNext","handleClick","i","current","length","slice","setState","concat","render","winner","moves","map","step","move","desc","jumpTo","status"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { calculateWinner } from '../helpers';\nimport Board from './Board'\n\n\n/* \nКлассовый компонент или реакт-компонент Game, который наследует \nсвойства и методы от React.Component\n*/\n\n\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            xIsNext: true,\n        };\n    }\n\n    /* создаем функцию-обработчик события нажатия на элемент*/\n\n    handleClick(i) {\n        const history = this.state.history; // константа history это все состояния поля после каждого хода, массив объектов\n        const current = history[history.length - 1]; // current - это последний элемент игры - состояние массива squares после последнего хода, последний объект, который был добавлен в массив history\n        const squares = current.squares.slice(); // с помощью slice() копируем массив squares, чтобы соблюсти иммутабельность\n        if (calculateWinner(squares) || squares[i]) { // проверяем есть ли победитель или все клетки заполнены.\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{   // метод concat() не изменяет оргинальный массив. создает новый и добавляет указанные элементы\n              squares: squares,\n            }]),\n            xIsNext: !this.state.xIsNext,\n          }); \n        }\n    \n        render() {\n          const history = this.state.history;\n          const current = history[history.length - 1];\n          const winner = calculateWinner(current.squares);\n\n          const moves = history.map((step, move) => {\n            const desc = move ?\n              `Go to move # ${move}` :\n              `Go to start`;\n            return (\n              <li>\n                <button onClick={() => this.jumpTo(move)}>{desc}</button>\n              </li>\n            );\n          });\n    \n          let status;\n          if (winner) {\n            status = `Player ${winner} is WINNER!! \n                            Congratulations!`;\n          } else {\n            status = `Player ${this.state.xIsNext ? 'X' : 'O'} !   Your turn!`;\n          }\n    \n          return (\n            <div className=\"game\">\n              <div className=\"game-board\">\n              <div>{ status }</div>\n              <br/>\n                <Board \n                  squares={current.squares}\n                  onClick={(i) => this.handleClick(i)}\n                />\n              </div>\n              <div className=\"game-info\">\n                \n                <ol>{/* TODO */}</ol>\n              </div>\n            </div>\n          );\n        }\n      }\n\n\n\n\n\n\nexport default Game"]},"metadata":{},"sourceType":"module"}